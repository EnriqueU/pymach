#!/usr/bin/python
# -*- coding: utf-8 -*-

# Author: Gusseppe Bravo <gbravor@uni.pe>
# License: BSD 3 clause

"""
This module provides the logic of the whole project.

"""
import define
import analyze
import prepare
import feature_selection

from sklearn.pipeline import Pipeline, FeatureUnion
from sklearn.svm import SVC
from sklearn import cross_validation

#STEP 1
analyzer = analyze.Analyze(define)
analyzer.pipeline()
#analyzer.read()


#STEP 2
preparer = prepare.Prepare(define)
preparer = preparer.pipeline()


#STEP 3
featurer = feature_selection.FeatureSelection(define)
featurer = featurer.pipeline()

#STEP4
pipeline = Pipeline([
    ('preparer', preparer),
    ('featurer', featurer),
    ('svc', SVC(kernel='linear')),
    ])

#STEP Evaluation
test_size = 0.33
seed = 7
X_train, X_test, Y_train, Y_test =  cross_validation.train_test_split(analyzer.X, analyzer.y,
test_size=test_size, random_state=seed)

f = open('test', 'w')
f.write('Model:\n\n')
f.writelines(str(pipeline.fit(X_train, Y_train)))
f.write('\n\n Score:')
f.write(str(pipeline.score(X_test, Y_test)))
f.close()
#print pipeline.fit(X_train, Y_train)
#print pipeline.score(X_test, Y_test)
#print pipeline.predict(X_test)

